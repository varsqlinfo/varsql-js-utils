{"version":3,"file":"varsql.db.util.min.js","mappings":"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","sources":["webpack://VARSQLUtils/webpack/universalModuleDefinition","webpack://VARSQLUtils/./src/constants.ts","webpack://VARSQLUtils/./src/core/DefaultChecker.ts","webpack://VARSQLUtils/./src/core/EndCheckTokenInfo.ts","webpack://VARSQLUtils/./src/core/Splitter.ts","webpack://VARSQLUtils/./src/core/TextCheckTokenInfo.ts","webpack://VARSQLUtils/./src/core/create/CreateChecker.ts","webpack://VARSQLUtils/./src/core/create/CreateFunctionChecker.ts","webpack://VARSQLUtils/./src/core/create/CreateProcedureChecker.ts","webpack://VARSQLUtils/./src/core/create/CreateTriggerCheckerr.ts","webpack://VARSQLUtils/./src/db/standard.splitter.ts","webpack://VARSQLUtils/./src/index.ts","webpack://VARSQLUtils/./src/splitOptions.ts","webpack://VARSQLUtils/./src/sqlSplitter.ts","webpack://VARSQLUtils/webpack/bootstrap","webpack://VARSQLUtils/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"VARSQLUtils\"] = factory();\n\telse\n\t\troot[\"VARSQLUtils\"] = factory();\n})(self, () => {\nreturn ","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DEFAULT_END_SPLITTER = exports.CREATE_END_CHECK_KEYWORD = exports.DEFAULT_TEXT_CHECK_TOKEN = exports.TAB_CHAR = exports.LINE_CHAR = void 0;\r\nconst CreateChecker_1 = __importDefault(require(\"./core/create/CreateChecker\"));\r\nconst CreateFunctionChecker_1 = __importDefault(require(\"./core/create/CreateFunctionChecker\"));\r\nconst CreateTriggerCheckerr_1 = __importDefault(require(\"./core/create/CreateTriggerCheckerr\"));\r\nconst CreateProcedureChecker_1 = __importDefault(require(\"./core/create/CreateProcedureChecker\"));\r\nconst DefaultChecker_1 = __importDefault(require(\"./core/DefaultChecker\"));\r\n// line char\r\nexports.LINE_CHAR = '\\n';\r\n// tab char\r\nexports.TAB_CHAR = '\\t';\r\nexports.DEFAULT_TEXT_CHECK_TOKEN = {\r\n    \"'\": {\r\n        keepWord: true,\r\n        checkEnd(beforeCh1, c1, c2) {\r\n            return beforeCh1 != \"\\\\\" && c1 == \"'\";\r\n        },\r\n    },\r\n    '\"': {\r\n        keepWord: true,\r\n        checkEnd(beforeCh1, c1, c2) {\r\n            return beforeCh1 != \"\\\\\" && c1 == '\"';\r\n        },\r\n    },\r\n    \"--\": {\r\n        keepWord: true,\r\n        endToken: exports.LINE_CHAR,\r\n    },\r\n    \"/*\": {\r\n        keepWord: true,\r\n        endToken: \"*/\",\r\n    },\r\n    \"#{\": {\r\n        keepWord: true,\r\n        endToken: \"}\",\r\n    },\r\n    \"${\": {\r\n        keepWord: true,\r\n        endToken: \"}\",\r\n    },\r\n};\r\nexports.CREATE_END_CHECK_KEYWORD = {\r\n    'if': {\r\n        end: 'if'\r\n    },\r\n    'loop': {\r\n        end: 'loop'\r\n    },\r\n    'case': {\r\n        end: ''\r\n    }\r\n};\r\nexports.DEFAULT_END_SPLITTER = {\r\n    'default': new DefaultChecker_1.default(),\r\n    'create': new CreateChecker_1.default(),\r\n    'create_function': new CreateFunctionChecker_1.default(exports.CREATE_END_CHECK_KEYWORD),\r\n    'create_trigger': new CreateTriggerCheckerr_1.default(exports.CREATE_END_CHECK_KEYWORD),\r\n    'create_procedure': new CreateProcedureChecker_1.default(exports.CREATE_END_CHECK_KEYWORD)\r\n};\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst constants_1 = require(\"../constants\");\r\n// create function check token\r\nclass DefaultChecker {\r\n    constructor() {\r\n        this.lineCount = 0;\r\n    }\r\n    init() {\r\n        this.lineCount = 0;\r\n    }\r\n    checkEnd(word, beforeWord, c1, beforeCh1, i, sql) {\r\n        if (/\\s/.test(c1)) {\r\n            if (this.lineCount > 0 && c1 == constants_1.LINE_CHAR) {\r\n                this.lineCount += 1;\r\n            }\r\n            else if (c1 == constants_1.LINE_CHAR) {\r\n                this.lineCount = 1;\r\n            }\r\n            return this.lineCount > 2 ? true : false; // 공백 2줄 이상이면 분리\r\n        }\r\n        this.lineCount = 0;\r\n        if (beforeCh1 == constants_1.LINE_CHAR && beforeCh1 == c1) {\r\n            return true;\r\n        }\r\n        return c1 == \";\";\r\n    }\r\n}\r\nexports.default = DefaultChecker;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EndCheckTokenInfo = void 0;\r\nclass EndCheckTokenInfo {\r\n    constructor(tokens) {\r\n        this.tokens = {};\r\n        this.tokens = tokens;\r\n    }\r\n    put(key, value) {\r\n        this.tokens[key] = value;\r\n        return this;\r\n    }\r\n    hasKey(key) {\r\n        return this.tokens.hasOwnProperty(key);\r\n    }\r\n    get(key) {\r\n        let endCheck = this.tokens[key];\r\n        endCheck.init();\r\n        return endCheck;\r\n    }\r\n}\r\nexports.EndCheckTokenInfo = EndCheckTokenInfo;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst constants_1 = require(\"../constants\");\r\nclass Splitter {\r\n    constructor(cfg) {\r\n        this.cfg = cfg;\r\n        let checker = this.checker();\r\n        this.textChecker = checker.textChecker;\r\n        this.endChecker = checker.endChecker;\r\n    }\r\n    checker() {\r\n        throw new Error('checker() not implemented by subclass');\r\n    }\r\n    split(sql, findLine, findCharPos) {\r\n        findLine = typeof findLine == 'undefined' ? -1 : findLine;\r\n        findCharPos = typeof findCharPos == 'undefined' ? -1 : findCharPos;\r\n        let statementList = [];\r\n        let statement = [];\r\n        let g_idx = 0;\r\n        let sqlLen = sql.length;\r\n        let lineIdx = 0;\r\n        let startLine = 0;\r\n        let startCharPos = 0;\r\n        let c1 = '', c2 = '';\r\n        let beforeCh1;\r\n        let orginCh;\r\n        let startCommand = false;\r\n        let command = '';\r\n        let word = '';\r\n        let beforeWord = '';\r\n        let endCheckerInter = null;\r\n        let textCheckerInter = null;\r\n        let currentEndTokenKey = '';\r\n        let lineStartCharIdx = 0;\r\n        let overflowFlag = false;\r\n        // 문자 단위로 읽기\r\n        for (let i = 0; i < sqlLen; i++) {\r\n            beforeCh1 = c1; // 이전 값 넣기.\r\n            orginCh = sql.charAt(i);\r\n            c1 = orginCh.toLowerCase();\r\n            c2 = c1 + ((i + 1) < sqlLen ? sql.charAt(i + 1) : '0');\r\n            c2 = c2.toLowerCase();\r\n            if (c1 == constants_1.LINE_CHAR) {\r\n                lineStartCharIdx = i;\r\n                ++lineIdx;\r\n            }\r\n            if (c1 == beforeCh1) {\r\n                g_idx++;\r\n                if (g_idx > 1000) {\r\n                    console.log('split error');\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                g_idx = 0;\r\n            }\r\n            if (textCheckerInter == null) {\r\n                if (this.textChecker.hasKey(c2) || this.textChecker.hasKey(c1)) {\r\n                    textCheckerInter = this.textChecker.get(c2) || this.textChecker.get(c1);\r\n                    if (textCheckerInter.keepWord !== false)\r\n                        statement.push(orginCh);\r\n                    continue;\r\n                }\r\n            }\r\n            else {\r\n                let check = false;\r\n                if (textCheckerInter.checkEnd && textCheckerInter.checkEnd(beforeCh1, c1, c2)) {\r\n                    check = true;\r\n                }\r\n                else if (textCheckerInter.endToken == c2 || textCheckerInter.endToken == c1) {\r\n                    check = true;\r\n                }\r\n                if (check) {\r\n                    if (textCheckerInter.keepWord === false) {\r\n                        i += (textCheckerInter.endToken ? textCheckerInter.endToken.length - 1 : 0);\r\n                    }\r\n                    else {\r\n                        statement.push(orginCh);\r\n                    }\r\n                    textCheckerInter = null;\r\n                }\r\n                else {\r\n                    if (textCheckerInter.keepWord !== false)\r\n                        statement.push(orginCh);\r\n                }\r\n                continue;\r\n            }\r\n            statement.push(orginCh);\r\n            if (/[(),]/.test(c1)) {\r\n                continue;\r\n            }\r\n            // 공백체크. ( 체크 \r\n            if (/[\\s(]/.test(c1)) {\r\n                if (startCommand)\r\n                    startCommand = false;\r\n                beforeWord = word;\r\n                word = '';\r\n            }\r\n            else {\r\n                if (command == '') {\r\n                    if (/[;/!@#$%^&()+=?\\-]/.test(c1)) { // command 시작 문자가 특수 문자면 command로 처리 안함. \r\n                        continue;\r\n                    }\r\n                    startLine = lineIdx;\r\n                    startCharPos = i - lineStartCharIdx;\r\n                    startCommand = true;\r\n                }\r\n                if (startCommand) {\r\n                    command += c1;\r\n                }\r\n                word += c1;\r\n            }\r\n            if (startCommand === false && endCheckerInter == null && command != '') {\r\n                currentEndTokenKey = command;\r\n                if (this.endChecker.hasKey(command)) {\r\n                    endCheckerInter = this.endChecker.get(command);\r\n                }\r\n                else {\r\n                    endCheckerInter = this.endChecker.get('default');\r\n                }\r\n            }\r\n            else {\r\n                if (this.endChecker.hasKey(currentEndTokenKey + '_' + word)) {\r\n                    currentEndTokenKey = currentEndTokenKey + '_' + word;\r\n                    endCheckerInter = this.endChecker.get(currentEndTokenKey);\r\n                }\r\n            }\r\n            if (!overflowFlag && (findLine != -1 && (lineIdx >= findLine && findCharPos <= i - lineStartCharIdx))) {\r\n                overflowFlag = true;\r\n                if (command.trim() == '' && statementList.length > 0) {\r\n                    return [statementList[statementList.length - 1]];\r\n                }\r\n            }\r\n            if ((endCheckerInter && endCheckerInter.checkEnd(word, beforeWord, c1, beforeCh1, i, sql)) || i + 1 == sqlLen) {\r\n                let sqlSplitInfo = {\r\n                    command: command,\r\n                    startLine: startLine,\r\n                    startCharPos: startCharPos,\r\n                    endLine: lineIdx,\r\n                    endCharPos: i - lineStartCharIdx,\r\n                    statement: statement.join('')\r\n                };\r\n                if (overflowFlag) {\r\n                    return [sqlSplitInfo];\r\n                }\r\n                if (findLine != -1) {\r\n                    if (startLine <= findLine && findLine <= lineIdx) { // 라인이 다를경우\r\n                        if (startLine == lineIdx && findLine == lineIdx) {\r\n                            if (startCharPos <= findCharPos && findCharPos <= sqlSplitInfo.endCharPos) {\r\n                                return [sqlSplitInfo];\r\n                            }\r\n                        }\r\n                        else {\r\n                            return [sqlSplitInfo];\r\n                        }\r\n                    }\r\n                }\r\n                statementList.push(sqlSplitInfo);\r\n                command = '';\r\n                word == '';\r\n                statement = [];\r\n                endCheckerInter = null;\r\n                startCommand = false;\r\n            }\r\n        }\r\n        return statementList;\r\n    }\r\n}\r\nexports.default = Splitter;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TextCheckTokenInfo = void 0;\r\nclass TextCheckTokenInfo {\r\n    constructor(tokens) {\r\n        this.tokens = tokens;\r\n    }\r\n    put(key, value) {\r\n        this.tokens[key] = value;\r\n        return this;\r\n    }\r\n    hasKey(key) {\r\n        return this.tokens.hasOwnProperty(key);\r\n    }\r\n    get(key) {\r\n        return this.tokens[key];\r\n    }\r\n}\r\nexports.TextCheckTokenInfo = TextCheckTokenInfo;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// create check token\r\nclass CreateChecker {\r\n    constructor() {\r\n        this.idx = 0;\r\n    }\r\n    init() {\r\n        this.idx = 0;\r\n    }\r\n    checkEnd(word, beforeWord, c1, beforeCh1, i, sql) {\r\n        console.log(++this.idx);\r\n        return c1 == '/' || c1 == ';';\r\n    }\r\n}\r\nexports.default = CreateChecker;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// create function check token\r\nclass CreateFunctionChecker {\r\n    constructor(endCheckKeywords) {\r\n        this.begin = false;\r\n        this.endFlag = false;\r\n        this.tokenStack = [];\r\n        this.endCheckKeywords = endCheckKeywords;\r\n    }\r\n    init() {\r\n        this.begin = false;\r\n        this.endFlag = false;\r\n        this.tokenStack = [];\r\n    }\r\n    checkEnd(word, beforeWord, c1, beforeCh1, i, sql) {\r\n        if ('begin' == word) {\r\n            this.begin = true;\r\n        }\r\n        else if (this.endCheckKeywords.hasOwnProperty(word)) {\r\n            if ('end' == beforeWord) {\r\n                this.tokenStack.pop();\r\n            }\r\n            else {\r\n                this.tokenStack.push(this.endCheckKeywords[word]);\r\n            }\r\n        }\r\n        else if ('end' == word) {\r\n            let popItem = this.tokenStack[this.tokenStack.length - 1];\r\n            if (popItem && popItem.end == '') {\r\n                this.tokenStack.pop();\r\n            }\r\n            this.endFlag = this.tokenStack.length == 0;\r\n        }\r\n        if (this.begin && this.endFlag && c1 == ';') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexports.default = CreateFunctionChecker;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// create function check token\r\nclass CreateProcedureChecker {\r\n    constructor(endCheckKeywords) {\r\n        this.begin = false;\r\n        this.endFlag = false;\r\n        this.tokenStack = [];\r\n        this.endCheckKeywords = endCheckKeywords;\r\n    }\r\n    init() {\r\n        this.begin = false;\r\n        this.endFlag = false;\r\n        this.tokenStack = [];\r\n    }\r\n    checkEnd(word, beforeWord, c1, beforeCh1, i, sql) {\r\n        if ('begin' == word) {\r\n            this.begin = true;\r\n        }\r\n        else if (this.endCheckKeywords.hasOwnProperty(word)) {\r\n            if ('end' == beforeWord) {\r\n                this.tokenStack.pop();\r\n            }\r\n            else {\r\n                this.tokenStack.push(this.endCheckKeywords[word]);\r\n            }\r\n        }\r\n        else if ('end' == word) {\r\n            var popItem = this.tokenStack[this.tokenStack.length - 1];\r\n            if (popItem && popItem.end == '') {\r\n                this.tokenStack.pop();\r\n            }\r\n            this.endFlag = this.tokenStack.length == 0;\r\n        }\r\n        if (this.begin && this.endFlag && c1 == ';') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexports.default = CreateProcedureChecker;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// create function check token\r\nclass CreateTriggerCheckerr {\r\n    constructor(endCheckKeywords) {\r\n        this.begin = false;\r\n        this.endFlag = false;\r\n        this.tokenStack = [];\r\n        this.endCheckKeywords = endCheckKeywords;\r\n    }\r\n    init() {\r\n        this.begin = false;\r\n        this.endFlag = false;\r\n        this.tokenStack = [];\r\n    }\r\n    checkEnd(word, beforeWord, c1, beforeCh1, i, sql) {\r\n        if ('begin' == word) {\r\n            this.begin = true;\r\n        }\r\n        else if (this.endCheckKeywords.hasOwnProperty(word)) {\r\n            if ('end' == beforeWord) {\r\n                this.tokenStack.pop();\r\n            }\r\n            else {\r\n                this.tokenStack.push(this.endCheckKeywords[word]);\r\n            }\r\n        }\r\n        else if ('end' == word) {\r\n            var popItem = this.tokenStack[this.tokenStack.length - 1];\r\n            if (popItem && popItem.end == '') {\r\n                this.tokenStack.pop();\r\n            }\r\n            this.endFlag = this.tokenStack.length == 0;\r\n        }\r\n        if (this.begin && this.endFlag && c1 == ';') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexports.default = CreateTriggerCheckerr;\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst constants_1 = require(\"../constants\");\r\nconst Splitter_1 = __importDefault(require(\"../core/Splitter\"));\r\nconst TextCheckTokenInfo_1 = require(\"../core/TextCheckTokenInfo\");\r\nconst EndCheckTokenInfo_1 = require(\"../core/EndCheckTokenInfo\");\r\nclass StandardSplitter extends Splitter_1.default {\r\n    checker() {\r\n        return {\r\n            textChecker: new TextCheckTokenInfo_1.TextCheckTokenInfo(constants_1.DEFAULT_TEXT_CHECK_TOKEN),\r\n            endChecker: new EndCheckTokenInfo_1.EndCheckTokenInfo(constants_1.DEFAULT_END_SPLITTER),\r\n        };\r\n    }\r\n}\r\nexports.default = StandardSplitter;\r\n","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__exportStar(require(\"./sqlSplitter\"), exports);\r\n__exportStar(require(\"./splitOptions\"), exports);\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.split = void 0;\r\nconst standard_splitter_1 = __importDefault(require(\"./db/standard.splitter\"));\r\nlet splitters = {\r\n    standard: standard_splitter_1.default,\r\n};\r\n// default option\r\nconst defaultOptions = {\r\n    language: \"standard\",\r\n    keepComment: true,\r\n    findLine: -1,\r\n    findCharPos: -1,\r\n};\r\n// split function\r\nconst split = (sql, cfg = {}) => {\r\n    if (typeof sql !== \"string\") {\r\n        throw new Error(\"Invalid sql argument. Expected string, instead got \" + typeof sql);\r\n    }\r\n    const options = Object.assign(Object.assign({}, defaultOptions), cfg);\r\n    const Splitter = splitters[options.language];\r\n    return new Splitter(options).split(sql, cfg.findLine, cfg.findCharPos);\r\n};\r\nexports.split = split;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(820);\n"],"names":["root","factory","exports","module","define","amd","self","__importDefault","this","mod","__esModule","Object","defineProperty","value","DEFAULT_END_SPLITTER","CREATE_END_CHECK_KEYWORD","DEFAULT_TEXT_CHECK_TOKEN","TAB_CHAR","LINE_CHAR","CreateChecker_1","require","CreateFunctionChecker_1","CreateTriggerCheckerr_1","CreateProcedureChecker_1","DefaultChecker_1","keepWord","checkEnd","beforeCh1","c1","c2","endToken","end","constants_1","DefaultChecker","lineCount","word","beforeWord","i","sql","test","EndCheckTokenInfo","tokens","key","hasOwnProperty","endCheck","init","Splitter","cfg","checker","textChecker","endChecker","Error","findLine","findCharPos","orginCh","statementList","statement","g_idx","sqlLen","length","lineIdx","startLine","startCharPos","startCommand","command","endCheckerInter","textCheckerInter","currentEndTokenKey","lineStartCharIdx","overflowFlag","charAt","toLowerCase","console","log","hasKey","get","push","trim","sqlSplitInfo","endLine","endCharPos","join","check","TextCheckTokenInfo","CreateChecker","idx","CreateFunctionChecker","endCheckKeywords","begin","endFlag","tokenStack","pop","popItem","CreateProcedureChecker","CreateTriggerCheckerr","Splitter_1","TextCheckTokenInfo_1","EndCheckTokenInfo_1","StandardSplitter","__createBinding","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","writable","configurable","enumerable","__exportStar","p","prototype","call","split","splitters","standard","defaultOptions","language","keepComment","options","assign","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}